{
	"info": {
		"_postman_id": "0ed2a99e-a3f6-4ebb-abbe-4979bab086d1",
		"name": "Explore With Me - locations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37541570"
	},
	"item": [
		{
			"name": "admin",
			"item": [
				{
					"name": "Добавление локации администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Имя локации из ответа соответствует имени добавленной локации\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Концертный зал\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Концертный зал\",\r\n    \"lat\": 138.3930,\r\n    \"lon\": 11.38400,\r\n    \"available\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/locations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление невалидной локации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Статус ответа должен быть bad request\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"BAD_REQUEST\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"\",\r\n    \"lat\": 138.3930,\r\n    \"lon\": 11.38400,\r\n    \"available\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/locations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление локации администратором по идентификатору",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const createLocation = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовая локация', lat: 138.3930, lon: 11.38400, available: true })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"(async () => {",
									"    try {",
									"        await createLocation();",
									"    } catch (error) {",
									"        console.error('Ошибка в pre-request скрипте:', error);",
									"    }",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/locations/{{locationId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"locations",
								"{{locationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление локации администратором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const createLocation = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовая локация', lat: 138.3930, lon: 11.38400, available: true })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"(async () => {",
									"    try {",
									"        await createLocation();",
									"    } catch (error) {",
									"        console.error('Ошибка в pre-request скрипте:', error);",
									"    }",
									"})();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Имя локации из ответа соответствует обновленному имени\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Обновленная локация\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Обновленная локация\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/locations/{{locationId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"locations",
								"{{locationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск локаций по имени админом с фильтром onlyAvailable=true",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uniqueName = `Поиск админ локация ${Date.now()}`;\r",
									"pm.environment.set(\"locationName\", uniqueName);\r",
									"\r",
									"const createLocation1 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const locationName = pm.environment.get(\"locationName\");\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/locations',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ \r",
									"                    name: `${locationName}1`,\r",
									"                    lat: 138.3930, \r",
									"                    lon: 11.38400, \r",
									"                    available: true \r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('locationId1', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createLocation2 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const locationName = pm.environment.get(\"locationName\");\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/locations',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ \r",
									"                    name: `${locationName}2`,\r",
									"                    lat: 38.3930, \r",
									"                    lon: 10.38400, \r",
									"                    available: true \r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('locationId2', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"// не должна попасть в выборку в ответе, т.к. availble=false\r",
									"const createLocation3 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const locationName = pm.environment.get(\"locationName\");\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/locations',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ \r",
									"                    name: `${locationName}3`,\r",
									"                    lat: 148.3930, \r",
									"                    lon: 19.38400, \r",
									"                    available: false \r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('locationId3', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"(async () => {\r",
									"    try {\r",
									"        await createLocation1();\r",
									"        await createLocation2();\r",
									"        await createLocation3();\r",
									"    } catch (error) {\r",
									"        console.error('Ошибка в pre-request скрипте:', error);\r",
									"    }\r",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Размер массива должен быть равен 2\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/locations?name={{locationName}}&available=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"locations"
							],
							"query": [
								{
									"key": "name",
									"value": "{{locationName}}"
								},
								{
									"key": "available",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "private",
			"item": [
				{
					"name": "Добавление локации в избранное пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomEmail = `testuser${Date.now()}@example.com`;",
									"",
									"const createUser = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/users',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовый пользователь', email: randomEmail })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('userId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createLocation = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовая локация', lat: 138.3930, lon: 11.38400, available: true })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"",
									"(async () => {",
									"    try {",
									"        await createUser();",
									"        await createLocation();",
									"    } catch (error) {",
									"        console.error('Ошибка в pre-request скрипте:', error);",
									"    }",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const locationId = pm.environment.get(\"locationId\");",
									"",
									"pm.test(\"Id локации из ответа соответствует id добавленной локации\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(locationId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/private/locations/user/{{userId}}/favorites/{{locationId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"locations",
								"user",
								"{{userId}}",
								"favorites",
								"{{locationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение избранных локаций пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomEmail = `testuser${Date.now()}@example.com`;",
									"",
									"const createUser = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/users',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовый пользователь', email: randomEmail })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('userId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createLocation1 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовая локация1', lat: 9.3930, lon: 1.38400, available: true })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId1', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createLocation2 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовая локация2', lat: 78.3930, lon: 61.38400, available: true })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId2', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createLocation3 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовая локация3', lat: 18.3930, lon: 67.38400, available: true })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId3', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const addFavoriteLocation = async (locationId) => {",
									"    return new Promise((resolve, reject) => {",
									"        const userId = pm.environment.get('userId');",
									"        pm.sendRequest({",
									"            url: `http://localhost:8080/private/locations/user/${userId}/favorites/${locationId}`,",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json'",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"(async () => {",
									"    try {",
									"        await createUser();",
									"        await createLocation1();",
									"        await createLocation2();",
									"        await createLocation3();",
									"",
									"        await addFavoriteLocation(pm.environment.get('locationId1'));",
									"        await addFavoriteLocation(pm.environment.get('locationId2'));",
									"        await addFavoriteLocation(pm.environment.get('locationId3'));",
									"        ",
									"    } catch (error) {",
									"        console.error('Ошибка в pre-request скрипте:', error);",
									"    }",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"В избранное добавились локации с ожидаемыми ID\", function () {",
									"    const jsonData = pm.response.json();",
									"    const favoriteLocationIds = jsonData.map(location => location.id);",
									"",
									"    const expectedLocationIds = [",
									"        pm.environment.get('locationId1'),",
									"        pm.environment.get('locationId2'),",
									"        pm.environment.get('locationId3')",
									"    ];",
									"    expectedLocationIds.forEach(id => {",
									"        pm.expect(favoriteLocationIds).to.include(id);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/private/locations/user/{{userId}}/favorites",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"locations",
								"user",
								"{{userId}}",
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление локации из избранного пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomEmail = `testuser${Date.now()}@example.com`;",
									"",
									"const createUser = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/users',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовый пользователь', email: randomEmail })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('userId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createLocation = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовая локация', lat: 38.3930, lon: 71.38400, available: true })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const addFavoriteLocation = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: `http://localhost:8080/private/locations/user/${pm.environment.get('userId')}/favorites/${pm.environment.get('locationId')}`,",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json'",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('favoriteLocationId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"(async () => {",
									"    try {",
									"        await createUser();",
									"        await createLocation();",
									"        await addFavoriteLocation();",
									"    } catch (error) {",
									"        console.error('Ошибка в pre-request скрипте:', error);",
									"    }",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/private/locations/user/{{userId}}/favorites/{{locationId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"locations",
								"user",
								"{{userId}}",
								"favorites",
								"{{locationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление в избранное локации, уже находящейся в избранном",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomEmail = `testuser${Date.now()}@example.com`;\r",
									"\r",
									"const createUser = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/users',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ name: 'Тестовый пользователь', email: randomEmail })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('userId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createLocation1 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/locations',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ name: 'Тестовая локация1', lat: 9.3930, lon: 1.38400, available: true })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('locationId1', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"\r",
									"const addFavoriteLocation = async (locationId) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const userId = pm.environment.get('userId');\r",
									"        pm.sendRequest({\r",
									"            url: `http://localhost:8080/private/locations/user/${userId}/favorites/${locationId}`,\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json'\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"(async () => {\r",
									"    try {\r",
									"        await createUser();\r",
									"        await createLocation1();\r",
									"        await addFavoriteLocation(pm.environment.get('locationId1'));\r",
									"    \r",
									"    } catch (error) {\r",
									"        console.error('Ошибка в pre-request скрипте:', error);\r",
									"    }\r",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Повторное добавление локации в избранное возвращает ошибку 409 CONFLICT\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Location is already in favorites\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/private/locations/user/{{userId}}/favorites/{{locationId1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"locations",
								"user",
								"{{userId}}",
								"favorites",
								"{{locationId1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "public",
			"item": [
				{
					"name": "Поиск локаций по имени (только available)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uniqueName = `Поиск public локация ${Date.now()}`;",
									"pm.environment.set(\"locationName\", uniqueName);",
									"",
									"const createLocation1 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        const locationName = pm.environment.get(\"locationName\");",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ ",
									"                    name: `${locationName}1`,",
									"                    lat: 138.3930, ",
									"                    lon: 11.38400, ",
									"                    available: true ",
									"                })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId1', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createLocation2 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        const locationName = pm.environment.get(\"locationName\");",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ ",
									"                    name: `${locationName}2`,",
									"                    lat: 38.3930, ",
									"                    lon: 10.38400, ",
									"                    available: true ",
									"                })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId2', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createLocation3 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        const locationName = pm.environment.get(\"locationName\");",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ ",
									"                    name: `${locationName}3`,",
									"                    lat: 148.3930, ",
									"                    lon: 19.38400, ",
									"                    available: false ",
									"                })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId3', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createLocation4 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        const locationName = pm.environment.get(\"locationName\");",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ ",
									"                    name: `${locationName}4`,",
									"                    lat: 48.3930, ",
									"                    lon: 119.38400, ",
									"                    available: true ",
									"                })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId4', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"(async () => {",
									"    try {",
									"        await createLocation1();",
									"        await createLocation2();",
									"        await createLocation3();",
									"        await createLocation4();",
									"    } catch (error) {",
									"        console.error('Ошибка в pre-request скрипте:', error);",
									"    }",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Размер массива должен быть равен 3\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.eql(3);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/public/locations?name={{locationName}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"public",
								"locations"
							],
							"query": [
								{
									"key": "name",
									"value": "{{locationName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение локации по идентификатору",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const createLocation = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовая локация для получения', lat: 138.3930, lon: 11.38400, available: true })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"(async () => {",
									"    try {",
									"        await createLocation();",
									"    } catch (error) {",
									"        console.error('Ошибка в pre-request скрипте:', error);",
									"    }",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const locationId = pm.environment.get(\"locationId\");",
									"",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"ID локации из ответа соответствует ID добавленной в pre-request локации\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(locationId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/public/locations/{{locationId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"public",
								"locations",
								"{{locationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск событий по координатам",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomEmail = `testuser${Date.now()}@example.com`;",
									"",
									"const generateRandomCoordinates = () => {",
									"    const lat = (Math.random() * 180 - 90).toFixed(5);",
									"    const lon = (Math.random() * 360 - 180).toFixed(5);",
									"    return { lat: parseFloat(lat), lon: parseFloat(lon) };",
									"};",
									"",
									"const generateOffset = (value, maxOffset) => {",
									"    const offset = (Math.random() * 2 - 1) * maxOffset;",
									"    return parseFloat((parseFloat(value) + offset).toFixed(5));",
									"};",
									"",
									"const createUser = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/users',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовый пользователь', email: randomEmail })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('userId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createLocation = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        // локация создается с координатами, немного отличающимися от координат из строки запроса, для проверки работы функция поиска distance(?, ?, l.lat, l.lon) в БД",
									"        // 0.09 градуса  - около 6-10 километров (для долготы и широты), в строке запроса радиус в километрах, если я правильно понял",
									"        // поэтому при маленьких значениях радиуса radius <7 выборка пустая, если больше - события попадают в выборку",
									"        const coordinates = generateRandomCoordinates();",
									"        const latWithOffset = generateOffset(coordinates.lat, 0.09);",
									"        const lonWithOffset = generateOffset(coordinates.lon, 0.09);",
									"",
									"        pm.environment.set(\"locationLat\", coordinates.lat);",
									"        pm.environment.set(\"locationLon\", coordinates.lon);",
									"",
									"        ",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/locations',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: 'Тестовая локация', lat: latWithOffset, lon: lonWithOffset, available: true })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('locationId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createCategory = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: 'http://localhost:8080/admin/categories',",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ name: `Тестовая категория${Date.now()}` })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('categoryId', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createEvent1 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        const userId = pm.environment.get('userId');",
									"        const categoryId = pm.environment.get('categoryId');",
									"        const locationId = pm.environment.get('locationId');",
									"        const now = new Date();",
									"        const eventDate = new Date(now.getTime() + 24 * 60 * 60 * 1000); // создаем событие с датой на день позже текущей",
									"        const formattedDate = eventDate.toISOString().replace('T', ' ').split('.')[0];",
									"        const annotation = 'Аннотация тестового события в доступном радиусе';",
									"",
									"        pm.sendRequest({",
									"            url: `http://localhost:8080/users/${userId}/events`,",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    annotation: annotation,",
									"                    category: categoryId,",
									"                    description: 'Описание тестовогое события',",
									"                    eventDate: formattedDate,",
									"                    location: locationId, // создаем событие с id уже добавленной локации (та, которая с оффсетом)",
									"                    paid: false,",
									"                    participantLimit: 0,",
									"                    requestModeration: false,",
									"                    title: 'Тестовое событие'",
									"                })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('eventId1', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const createEvent2 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        const userId = pm.environment.get('userId');",
									"        const categoryId = pm.environment.get('categoryId');",
									"        const now = new Date();",
									"        const eventDate = new Date(now.getTime() + 24 * 60 * 60 * 1000);",
									"        const formattedDate = eventDate.toISOString().replace('T', ' ').split('.')[0];",
									"",
									"        pm.sendRequest({",
									"            url: `http://localhost:8080/users/${userId}/events`,",
									"            method: 'POST',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    annotation: 'Аннотация тестовогое события2',",
									"                    category: categoryId,",
									"                    description: 'Описание тестового события2',",
									"                    eventDate: formattedDate,",
									"                    location: { lat: 8.3930, lon: 1.38400 },",
									"                    paid: false,",
									"                    participantLimit: 0,",
									"                    requestModeration: false,",
									"                    title: 'Тестовое событие2'",
									"                })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('eventId2', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const confirmEvent1 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        const eventId = pm.environment.get('eventId1');",
									"        pm.sendRequest({",
									"            url: `http://localhost:8080/admin/events/${eventId}`,",
									"            method: 'PATCH',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    stateAction: 'PUBLISH_EVENT'",
									"                })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('eventId2', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"const confirmEvent2 = async () => {",
									"    return new Promise((resolve, reject) => {",
									"        const eventId = pm.environment.get('eventId2');",
									"        pm.sendRequest({",
									"            url: `http://localhost:8080/admin/events/${eventId}`,",
									"            method: 'PATCH',",
									"            header: 'Content-Type:application/json',",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    stateAction: 'PUBLISH_EVENT'",
									"                })",
									"            }",
									"        }, function (err, res) {",
									"            if (err) {",
									"                reject(err);",
									"            } else {",
									"                pm.environment.set('eventId2', res.json().id);",
									"                resolve();",
									"            }",
									"        });",
									"    });",
									"};",
									"",
									"(async () => {",
									"    try {",
									"        await createUser();",
									"        await createLocation();",
									"        await createCategory();",
									"        await createEvent1();",
									"        await confirmEvent1();",
									"        await createEvent2();",
									"        await confirmEvent2();",
									"    } catch (error) {",
									"        console.error('Ошибка в pre-request скрипте:', error);",
									"    }",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Аннотация первого элемента из ответа соответствует аннотации event1\", function() {",
									"    const jsonData = pm.response.json();",
									"    const firstEventAnnotation = jsonData[0].annotation;",
									"    pm.expect(firstEventAnnotation).to.eql('Аннотация тестового события в доступном радиусе');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/public/locations/coordinates?lat={{locationLat}}&lon={{locationLon}}&radius=10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"public",
								"locations",
								"coordinates"
							],
							"query": [
								{
									"key": "lat",
									"value": "{{locationLat}}"
								},
								{
									"key": "lon",
									"value": "{{locationLon}}"
								},
								{
									"key": "radius",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий по идентификатору локации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomEmail = `testuser${Date.now()}@example.com`;\r",
									"\r",
									"const createUser = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/users',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ name: 'Тестовый пользователь', email: randomEmail })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('userId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createLocation = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/locations',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ name: 'Тестовая локация новая', lat: 12.839, lon: 44.9405, available: true })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('locationId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createCategory = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/categories',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ name: `Тестовая категория${Date.now()}` })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('categoryId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createEvent1 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const userId = pm.environment.get('userId');\r",
									"        const categoryId = pm.environment.get('categoryId');\r",
									"        const locationId = pm.environment.get('locationId');\r",
									"        const now = new Date();\r",
									"        const eventDate = new Date(now.getTime() + 24 * 60 * 60 * 1000);\r",
									"        const formattedDate = eventDate.toISOString().replace('T', ' ').split('.')[0];\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: `http://localhost:8080/users/${userId}/events`,\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    annotation: 'Получение событий по идентификатору локации1',\r",
									"                    category: categoryId,\r",
									"                    description: 'Описание тестовогое события1',\r",
									"                    eventDate: formattedDate,\r",
									"                    location: locationId,\r",
									"                    paid: false,\r",
									"                    participantLimit: 0,\r",
									"                    requestModeration: false,\r",
									"                    title: 'Тестовое событие1'\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('eventId1', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createEvent2 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const userId = pm.environment.get('userId');\r",
									"        const categoryId = pm.environment.get('categoryId');\r",
									"        const locationId = pm.environment.get('locationId');\r",
									"        const now = new Date();\r",
									"        const eventDate = new Date(now.getTime() + 24 * 60 * 60 * 1000);\r",
									"        const formattedDate = eventDate.toISOString().replace('T', ' ').split('.')[0];\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: `http://localhost:8080/users/${userId}/events`,\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    annotation: 'Получение событий по идентификатору локации2',\r",
									"                    category: categoryId,\r",
									"                    description: 'Описание тестовогое события2',\r",
									"                    eventDate: formattedDate,\r",
									"                    location: locationId,\r",
									"                    paid: false,\r",
									"                    participantLimit: 0,\r",
									"                    requestModeration: false,\r",
									"                    title: 'Тестовое событие2'\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('eventId2', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const confirmEvent1 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const eventId = pm.environment.get('eventId1');\r",
									"        pm.sendRequest({\r",
									"            url: `http://localhost:8080/admin/events/${eventId}`,\r",
									"            method: 'PATCH',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    stateAction: 'PUBLISH_EVENT'\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('eventId1', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const confirmEvent2 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const eventId = pm.environment.get('eventId2');\r",
									"        pm.sendRequest({\r",
									"            url: `http://localhost:8080/admin/events/${eventId}`,\r",
									"            method: 'PATCH',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    stateAction: 'PUBLISH_EVENT'\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('eventId2', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"(async () => {\r",
									"    try {\r",
									"        await createUser();\r",
									"        await createLocation();\r",
									"        await createCategory();\r",
									"        await createEvent1();\r",
									"        await confirmEvent1();\r",
									"        await createEvent2();\r",
									"        await confirmEvent2();\r",
									"    } catch (error) {\r",
									"        console.error('Ошибка в pre-request скрипте:', error);\r",
									"    }\r",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Размер массива должен быть равен 2\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/public/locations/{{locationId}}/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"public",
								"locations",
								"{{locationId}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление события с lD уже существующей локации и его получение",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomEmail = `testuser${Date.now()}@example.com`;\r",
									"\r",
									"const createUser = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/users',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ name: 'Тестовый пользователь', email: randomEmail })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('userId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createLocation = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/locations',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ name: 'Тестовая локация новая', lat: 12.839, lon: 44.9405, available: true })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('locationId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createCategory = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/categories',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ name: `Тестовая категория${Date.now()}` })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('categoryId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createEvent1 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const userId = pm.environment.get('userId');\r",
									"        const categoryId = pm.environment.get('categoryId');\r",
									"        const locationId = pm.environment.get('locationId');\r",
									"        const now = new Date();\r",
									"        const eventDate = new Date(now.getTime() + 24 * 60 * 60 * 1000);\r",
									"        const formattedDate = eventDate.toISOString().replace('T', ' ').split('.')[0];\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: `http://localhost:8080/users/${userId}/events`,\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    annotation: 'Аннотация события с предполагаемыми координатами lat: 12.839, lon: 44.9405',\r",
									"                    category: categoryId,\r",
									"                    description: 'Описание тестовогое события',\r",
									"                    eventDate: formattedDate,\r",
									"                    location: locationId,\r",
									"                    paid: false,\r",
									"                    participantLimit: 0,\r",
									"                    requestModeration: false,\r",
									"                    title: 'Тестовое событие'\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('eventId1', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"\r",
									"const confirmEvent1 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const eventId = pm.environment.get('eventId1');\r",
									"        pm.sendRequest({\r",
									"            url: `http://localhost:8080/admin/events/${eventId}`,\r",
									"            method: 'PATCH',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    stateAction: 'PUBLISH_EVENT'\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('eventId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"(async () => {\r",
									"    try {\r",
									"        await createUser();\r",
									"        await createLocation();\r",
									"        await createCategory();\r",
									"        await createEvent1();\r",
									"        await confirmEvent1();\r",
									"    } catch (error) {\r",
									"        console.error('Ошибка в pre-request скрипте:', error);\r",
									"    }\r",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка координат локации из события, соответствующих добавленной location\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const location = jsonData.location;\r",
									"    pm.expect(location.lat).to.eql(12.839);\r",
									"    pm.expect(location.lon).to.eql(44.9405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/{{eventId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление события с новой локацией (только lat и lon) и его получение",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomEmail = `testuser${Date.now()}@example.com`;\r",
									"\r",
									"const createUser = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/users',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ name: 'Тестовый пользователь', email: randomEmail })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('userId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createCategory = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest({\r",
									"            url: 'http://localhost:8080/admin/categories',\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({ name: `Тестовая категория${Date.now()}` })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('categoryId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"const createEvent1 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const userId = pm.environment.get('userId');\r",
									"        const categoryId = pm.environment.get('categoryId');\r",
									"        const now = new Date();\r",
									"        const eventDate = new Date(now.getTime() + 24 * 60 * 60 * 1000);\r",
									"        const formattedDate = eventDate.toISOString().replace('T', ' ').split('.')[0];\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: `http://localhost:8080/users/${userId}/events`,\r",
									"            method: 'POST',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    annotation: 'Аннотация тестовогое события',\r",
									"                    category: categoryId,\r",
									"                    description: 'Описание тестового события',\r",
									"                    eventDate: formattedDate,\r",
									"                    location: { lat: 18.3930, lon: 21.38400 },\r",
									"                    paid: false,\r",
									"                    participantLimit: 0,\r",
									"                    requestModeration: false,\r",
									"                    title: 'Тестовое событие'\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('eventId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"\r",
									"const confirmEvent1 = async () => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        const eventId = pm.environment.get('eventId');\r",
									"        pm.sendRequest({\r",
									"            url: `http://localhost:8080/admin/events/${eventId}`,\r",
									"            method: 'PATCH',\r",
									"            header: 'Content-Type:application/json',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    stateAction: 'PUBLISH_EVENT'\r",
									"                })\r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                reject(err);\r",
									"            } else {\r",
									"                pm.environment.set('eventId', res.json().id);\r",
									"                resolve();\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"\r",
									"(async () => {\r",
									"    try {\r",
									"        await createUser();\r",
									"        await createCategory();\r",
									"        await createEvent1();\r",
									"        await confirmEvent1();\r",
									"    } catch (error) {\r",
									"        console.error('Ошибка в pre-request скрипте:', error);\r",
									"    }\r",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка координат локации из события, соответствующих добавленной location\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const location = jsonData.location;\r",
									"    pm.expect(location.lat).to.eql(18.393);\r",
									"    pm.expect(location.lon).to.eql(21.384);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/{{eventId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"{{eventId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}